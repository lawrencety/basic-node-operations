####Questions

>  Run the commands sort, wc and uniq on the commands.js file. Explain how they work and what the output was.

1: sort orders the entire file line by line alphabetically. This include spaces, punctuation, and numbers.
```
$ sort commands.js
      done(data);
      if (err) throw err;
     break
     break;
     commandLibrary.cat(userInputArray.slice(1));
     commandLibrary.echo(userInputArray.slice(1).join(' '));
    });
    case 'cat':
    case 'echo':
    const fileName = fullPath[0];
    done(userInput);
    fs.readFile(fileName, (err, data) => {
  }
  }
  },
  'cat': function(fullPath) {
  const command = userInputArray[0];
  const userInputArray = userInput.split(' ');
  'echo': function(userInput) {
  process.stdout.write('\nprompt > ');
  process.stdout.write(output);
  switch (command) {






}
}
};
const commandLibrary = {
const fs = require('fs');
function done(output) {
function evaluateCmd(userInput) {
module.exports.commandLibrary = commandLibrary;
module.exports.evaluateCmd = evaluateCmd;
```

2. wc counts the number of lines, words, and characters respectively
```
$ wc commands.js
 37  73 817 commands.js
```

3. uniq parses the file to see if there are any consecutive lines that are duplicated and removes the duplicate.
```
$ uniq commands.js
const fs = require('fs');

function done(output) {
  process.stdout.write(output);
  process.stdout.write('\nprompt > ');
}

function evaluateCmd(userInput) {
  const userInputArray = userInput.split(' ');
  const command = userInputArray[0];

  switch (command) {
    case 'echo':
     commandLibrary.echo(userInputArray.slice(1).join(' '));
     break;
    case 'cat':
     commandLibrary.cat(userInputArray.slice(1));
     break
  }
}

const commandLibrary = {
  'echo': function(userInput) {
    done(userInput);
  },

  'cat': function(fullPath) {
    const fileName = fullPath[0];
    fs.readFile(fileName, (err, data) => {
      if (err) throw err;
      done(data);
    });
  }
};

module.exports.commandLibrary = commandLibrary;
module.exports.evaluateCmd = evaluateCmd;
```

>  Using the pipe (|) connect at least two commands and run it on commands.js. Explain what the output was and why the specific data was outputted.

A: using `sort` and then the `uniq` commands remove a lot of blank lines and brackets since there is a number of those throughout the original code.
```
$ sort commands.js | uniq
      done(data);
      if (err) throw err;
     break
     break;
     commandLibrary.cat(userInputArray.slice(1));
     commandLibrary.echo(userInputArray.slice(1).join(' '));
    });
    case 'cat':
    case 'echo':
    const fileName = fullPath[0];
    done(userInput);
    fs.readFile(fileName, (err, data) => {
  }
  },
  'cat': function(fullPath) {
  const command = userInputArray[0];
  const userInputArray = userInput.split(' ');
  'echo': function(userInput) {
  process.stdout.write('\nprompt > ');
  process.stdout.write(output);
  switch (command) {

}
};
const commandLibrary = {
const fs = require('fs');
function done(output) {
function evaluateCmd(userInput) {
module.exports.commandLibrary = commandLibrary;
module.exports.evaluateCmd = evaluateCmd;
```

####Programming Questions

>  Implement the head command in the commands.js file. The head command outputs the first n lines of a file (you may decide what n is). This function will be similar to cat in structure so it will be helpful to reference.

>  Implement the tail command in the commands.js file. The tail command is the inverse of the head command. It outputs the last n lines of a file (you may decide what n is).

>  It is possible that a user will input a non-existent command to our bash shell. Within commands.js create an errorHandler function which will output an error message if the command cannot be found.
Hint: Use the default: case in your switch statement.

>  In this checkpoint, you encountered built-in JavaScript methods as well as the new ES6 syntax. Review the information below before attempting the programming challenge.

Starter Code
```
function reverseString(inputString) {
   //solve problem
}
```
